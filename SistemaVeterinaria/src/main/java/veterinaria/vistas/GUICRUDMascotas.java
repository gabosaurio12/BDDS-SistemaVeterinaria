/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package veterinaria.vistas;

import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import veterinaria.businesslogic.daolistos.MascotaDAO;
import veterinaria.businesslogic.daolistos.duenoDAO;
import veterinaria.businesslogic.dtolistos.duenoDTO;
import veterinaria.businesslogic.dtolistos.mascotaDTO;

/**
 *
 * @author gabosaurio
 */
public class GUICRUDMascotas extends javax.swing.JFrame {

    private static final Logger logger = LogManager.getLogger(GUICRUDMascotas.class);
    private List<mascotaDTO> mascotas;
    /**
     * Creates new form GUICRUDMascotas
     */
    public GUICRUDMascotas() {
        try {
            this.mascotas = new MascotaDAO().obtenerTodos();
        } catch (SQLException ex) {
            logger.error("Error en GUICRUDMascotas.Constructor.obtenerTodos", ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMascotas = new javax.swing.JTable();
        botonRegistrar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonEditar = new javax.swing.JButton();
        botonRegresar = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("Mascotas");

        tablaMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Due単o", "Nombre", "Cumplea単os", "Color", "Peso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaMascotas);
        if (tablaMascotas.getColumnModel().getColumnCount() > 0) {
            tablaMascotas.getColumnModel().getColumn(0).setResizable(false);
            tablaMascotas.getColumnModel().getColumn(1).setResizable(false);
            tablaMascotas.getColumnModel().getColumn(2).setResizable(false);
            tablaMascotas.getColumnModel().getColumn(3).setResizable(false);
            tablaMascotas.getColumnModel().getColumn(4).setResizable(false);
        }

        botonRegistrar.setText("Registrar");
        botonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonEditar.setText("Editar");
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });

        botonRegresar.setText("Regresar");
        botonRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(botonRegistrar)
                        .addComponent(botonEliminar)
                        .addComponent(botonEditar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonRegresar)
                        .addGap(6, 6, 6)))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(botonRegistrar)
                        .addGap(18, 18, 18)
                        .addComponent(botonEditar)
                        .addGap(18, 18, 18)
                        .addComponent(botonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonRegresar)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarActionPerformed
        GUIRegistroMascota controlador = new GUIRegistroMascota();
        controlador.llenarDuenos();
        controlador.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_botonRegistrarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        int filaSeleccionada = tablaMascotas.getSelectedRow();
        if (filaSeleccionada != -1) {
            mascotaDTO mascota = mascotas.get(filaSeleccionada);
            try {
                new MascotaDAO().eliminar(mascota.getIdMascota());
                JOptionPane.showMessageDialog(this, "Mascota eliminada exitosamente");
                llenarTabla();
            } catch (SQLException ex) {
                logger.error("Error en GUICRUDMascotas.botonEliminarActionPerformed", ex);
                JOptionPane.showMessageDialog(this, "Error al eliminar mascota");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Elija una mascota por favor");
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegresarActionPerformed
        GUIMenuPrincipal controlador = new GUIMenuPrincipal();
        controlador.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_botonRegresarActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        int filaSeleccionada = tablaMascotas.getSelectedRow();
        if (filaSeleccionada != -1) {
            mascotaDTO mascota = mascotas.get(filaSeleccionada);
            GUIEditarMascota controlador = new GUIEditarMascota(mascota);
            controlador.llenearDuenos();
            controlador.llenarCampos();
            controlador.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Elija una mascota por favor");
        }
    }//GEN-LAST:event_botonEditarActionPerformed

    public void llenarTabla() {
        String[] columnas = {"Due単o", "Nombre", "Cumplea単os", "Color", "Peso" };
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0);
        
        mascotas.clear();
        try {
            mascotas = new MascotaDAO().obtenerTodos();
        } catch (SQLException ex) {
            logger.error("Error en GUICRUDMascotas.llenarTabla", ex);
            JOptionPane.showMessageDialog(this, "Error al cargar datos, intenta de nuevo por favor");
        }
        
        for (mascotaDTO mascota : mascotas) {
            duenoDTO dueno = null;
            try {
                dueno = new duenoDAO().obtenerPorId(mascota.getIdDuenio());
            } catch (Exception ex) {
                logger.error("Error en GUICRUDMascotas.llenarTabla", ex);
                JOptionPane.showMessageDialog(this, "Error al cargar due単o, intenta de nuevo por favor");
            }
            Object[] datosColumna = {dueno.getNombreCompleto(), mascota.getNombre(),
                mascota.getFechaDeNacimiento(), mascota.getColor(), mascota.getPeso()
            };
            modelo.addRow(datosColumna);
        }
        
        tablaMascotas.setModel(modelo);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUICRUDMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUICRUDMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUICRUDMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUICRUDMascotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUICRUDMascotas controlador = new GUICRUDMascotas();
                controlador.llenarTabla();
                controlador.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEditar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonRegistrar;
    private javax.swing.JButton botonRegresar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaMascotas;
    // End of variables declaration//GEN-END:variables
}
